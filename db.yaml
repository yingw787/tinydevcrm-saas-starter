AWSTemplateFormatVersion: "2010-09-09"

Description: Database definition for the TinyDevCRM application.

Parameters:
  EC2KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances

  ECSClusterName:
    Type: String
    Default: tinydevcrm-db
    Description: Name of the ECS cluster for the database.

  PublicSubnetAReference:
    Type: String
    Default: tinydevcrm-ec2-networking-subnet-a
    Description: "Reference to public subnet A as part of stack 'tinydevcrm-ec2-networking.yaml'."

  PublicSubnetBReference:
    Type: String
    Default: tinydevcrm-ec2-networking-subnet-b
    Description: "Reference to public subnet B as part of stack 'tinydevcrm-ec2-networking.yaml'."

  SSHLocation:
    Type: String
    Default: "0.0.0.0/0"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    MaxLength: "18"
    MinLength: "9"

  VPCReference:
    Type: String
    Default: tinydevcrm-ec2-networking-vpc
    Description: "Reference to VPC deployed as part of stack `tinydevcrm-ec2-networking.yaml`."

Resources:
  DatabaseLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/ecs/tinydevcrm-db"
      RetentionInDays: 7

  DatabaseECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub ${ECSClusterName}

  DatabaseNLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Description: Network load balancer.
    Properties:
      Scheme: internet-facing
      Subnets:
        - "Fn::ImportValue": !Ref PublicSubnetAReference
        - "Fn::ImportValue": !Ref PublicSubnetBReference
      Type: network

  DatabaseNLBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Description: Target group for network load balancer.
    Properties:
      Port: 5432
      Protocol: TCP
      TargetType: ip
      VpcId:
        "Fn::ImportValue": !Ref VPCReference

  DatabaseNLBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DatabaseNLBTargetGroup
      LoadBalancerArn: !Ref DatabaseNLB
      Port: 5432
      Protocol: TCP

  DatabaseEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
        - CidrIp: !Ref SSHLocation
          FromPort: "5432"
          IpProtocol: tcp
          ToPort: "5432"
      VpcId:
        "Fn::ImportValue": !Ref VPCReference

  DatabaseEC2AutoScalingRole:
    Type: "AWS::IAM::Role"
    Description: Role to define EC2 autoscaling. NOTE that the EC2 autoscaling group may fail to stabilize if this role is mis-defined.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: tinydevcrm-db-service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  DatabaseEC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref DatabaseEC2HostsRole

  DatabaseEC2HostsRole:
    Type: "AWS::IAM::Role"
    Description: "Role for EC2 hosts as passed by resource 'DatabaseEC2InstanceProfile'. This allows the ECS agent on the EC2 hosts to communicate with the ECS control plane, and download container images from AWS ECR to run with the host, in addition to updating EBS volume permissions."
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ec2-hosts
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"
        - PolicyName: ec2-volumes
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:CreateVolume
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DeleteVolume
                  - ec2:DeleteSnapshot
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeAttribute
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeSnapshots
                  - ec2:CopySnapshot
                  - ec2:DescribeSnapshotAttribute
                  - ec2:DetachVolume
                  - ec2:ModifySnapshotAttribute
                  - ec2:ModifyVolumeAttribute
                  - ec2:DescribeTags
                Resource: '*'
