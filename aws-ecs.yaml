AWSTemplateFormatVersion: "2010-09-09"

Description: AWS Elastic Container Service (ECS) task and service definitions for TinyDevCRM

Parameters:
  ApplicationDockerImageTag:
    Type: String
    Default: latest
    Description: Image tag for the Django application backend Docker image.

  ApplicationECRRepositoryName:
    Type: String
    Default: tinydevcrm-ecr/app
    Description: Elastic Container Registry repository name where Docker builds for the Django application backend go.

  DatabaseDockerImageTag:
    Type: String
    Default: latest
    Description: Image tag for the PostgreSQL database Docker image.

  ECSClusterName:
    Type: String
    Default: tinydevcrm-ecs-cluster
    Description: "ECS cluster name matching the one defined in 'aws-ec2-compute.yaml'."

  PublicLoadBalancerListenerReference:
    Type: String
    Default: tinydevcrm-ec2-compute-public-elb-listener
    Description: "CloudFormation output reference from stack 'aws-ec2-compute.yaml' for the public load balancer listener."

  PublicLoadBalancerReference:
    Type: String
    Default: tinydevcrm-ec2-compute-public-elb
    Description: "CloudFormation ARN output reference from stack `aws-ec2-compute.yaml` for the public load balancer."

  PublicLoadBalancerTargetGroupReference:
    Type: String
    Default: tinydevcrm-ec2-compute-public-elb-target-group
    Description: "CloudFormation output reference from stack 'aws-ec2-compute.yaml' for the public load balancer target group."

  VPCReference:
    Type: String
    Default: tinydevcrm-ec2-networking-vpc
    Description: "Reference to VPC deployed as part of stack `tinydevcrm-ec2-networking.yaml`."

Resources:
  ApplicationCluster:
    Type: "AWS::ECS::Cluster"
    Description: ECS cluster for deploying ECS task and service definitions.
    Properties:
      ClusterName: !Sub ${ECSClusterName}

  ApplicationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/ecs/tinydevcrm"
      RetentionInDays: 7

  ApplicationService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: tinydevcrm-app
          ContainerPort: 8000
          TargetGroupArn: !ImportValue
            Ref: PublicLoadBalancerTargetGroupReference
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
      TaskDefinition: !Ref ApplicationTaskDefinition

  ApplicationTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: tinydevcrm-app
          Command:
            - gunicorn
            - "wsgi:application"
            - "--bind"
            - "0.0.0.0:8000"
          Cpu: 245
          Environment:
            - Name: DEBUG
              Value: 1
            - Name: SECRET_KEY
              Value: change_me
            - Name: DJANGO_ALLOWED_HOSTS
              Value: "*"
            - Name: SQL_ENGINE
              Value: django.db.backends.sqlite3
            - Name: SQL_DATABASE
              Value: db.sqlite3
            - Name: SQL_USER
              Value: user
            - Name: SQL_PASSWORD
              Value: password
            - Name: SQL_HOST
              Value: localhost
            - Name: SQL_PORT
              Value: 5432
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tinydevcrm-ecr/app:${ApplicationDockerImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/tinydevcrm"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: docker
          MemoryReservation: 395
          MountPoints:
            - ContainerPath: /home/app/web/staticfiles
              SourceVolume: static_volume
          PortMappings:
            - ContainerPort: 8000
              HostPort: 0
        - Name: collectstatic
          Command:
            - python3
            - manage.py
            - collectstatic
            - "--no-input"
          Cpu: 5
          Environment:
            - Name: DEBUG
              Value: 1
            - Name: SECRET_KEY
              Value: change_me
            - Name: DJANGO_ALLOWED_HOSTS
              Value: "*"
            - Name: SQL_ENGINE
              Value: django.db.backends.sqlite3
            - Name: SQL_DATABASE
              Value: db.sqlite3
            - Name: SQL_USER
              Value: user
            - Name: SQL_PASSWORD
              Value: password
            - Name: SQL_HOST
              Value: localhost
            - Name: SQL_PORT
              Value: 5432
          Essential: false
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tinydevcrm-ecr/app:${ApplicationDockerImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/tinydevcrm"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: docker
          MemoryReservation: 5
          MountPoints:
            - ContainerPath: /home/app/web/staticfiles
              SourceVolume: static_volume
      Family: tinydevcrm-app
      Volumes:
        - Name: static_volume
          Host:
            SourcePath: /home/app/web/staticfiles
