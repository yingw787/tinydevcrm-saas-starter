AWSTemplateFormatVersion: "2010-09-09"

Description: Compute layer definition for the TinyDevCRM application, w/ EC2 resources along with AWS Elastic Container Service (ECS) task and service definitions.

Parameters:
  ApplicationDockerImageTag:
    Type: String
    Default: latest
    Description: Image tag for the Django application backend Docker image.

  ApplicationECRRepositoryName:
    Type: String
    Default: tinydevcrm-ecr/app
    Description: Elastic Container Registry repository name where Docker builds for the Django application backend go.

  EC2DesiredCapacity:
    Type: Number
    Default: "1"
    Description: Average number of EC2 instances to launch in the EC2 cluster.

  EC2HostAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: ID for the ECS-optimized EC2 AMI, updated to Amazon Linux 2.

  EC2InstanceType:
    Type: String
    Default: t2.medium
    Description: Instance type of the EC2 instance acting as EC2 host.

  EC2KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances

  EC2MaximumCapacity:
    Type: Number
    Default: "6"
    Description: Maximum number of EC2 instances to launch in the EC2 cluster.

  EC2MinimumCapacity:
    Type: Number
    Default: "1"
    Description: Minimum number of EC2 instances to launch in the EC2 cluster.

  ECSClusterName:
    Type: String
    Default: tinydevcrm-ecs-cluster
    Description: "Name of the ECS cluster, to be used consistently both here and in 'aws-ecs.yaml'."

  PublicSubnetAReference:
    Type: String
    Default: tinydevcrm-ec2-networking-subnet-a
    Description: "Reference to public subnet A as part of stack 'tinydevcrm-ec2-networking.yaml'."

  PublicSubnetBReference:
    Type: String
    Default: tinydevcrm-ec2-networking-subnet-b
    Description: "Reference to public subnet B as part of stack 'tinydevcrm-ec2-networking.yaml'."

  SSHLocation:
    Type: String
    Default: "0.0.0.0/0"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    MaxLength: "18"
    MinLength: "9"

  VPCReference:
    Type: String
    Default: tinydevcrm-ec2-networking-vpc
    Description: "Reference to VPC deployed as part of stack `tinydevcrm-ec2-networking.yaml`."

Resources:
  ApplicationCluster:
    Type: "AWS::ECS::Cluster"
    DependsOn:
      - EC2AutoScalingGroup
    Description: ECS cluster for deploying ECS task and service definitions.
    Properties:
      ClusterName: !Sub ${ECSClusterName}

  ApplicationLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/ecs/tinydevcrm"
      RetentionInDays: 7

  ApplicationService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - EC2AutoScalingGroup
      - PublicLoadBalancerListener
    Properties:
      Cluster: !Ref ApplicationCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ApplicationSecurityGroup
          Subnets:
            - "Fn::ImportValue": !Ref PublicSubnetAReference
            - "Fn::ImportValue": !Ref PublicSubnetBReference
      DesiredCount: !Ref EC2DesiredCapacity
      LoadBalancers:
        - ContainerName: tinydevcrm-app
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationServiceTargetGroup
      TaskDefinition: !Ref ApplicationTaskDefinition

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Application Security Group
      VpcId: !ImportValue
        Ref: VPCReference
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: -1

  ApplicationTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: tinydevcrm-app
          Command:
            - gunicorn
            - "wsgi:application"
            - "--bind"
            - "0.0.0.0:8000"
          Cpu: 245
          Environment:
            - Name: DEBUG
              Value: '1'
            - Name: SECRET_KEY
              Value: change_me
            - Name: DJANGO_ALLOWED_HOSTS
              Value: "*"
            - Name: SQL_ENGINE
              Value: django.db.backends.sqlite3
            - Name: SQL_DATABASE
              Value: db.sqlite3
            - Name: SQL_USER
              Value: user
            - Name: SQL_PASSWORD
              Value: password
            - Name: SQL_HOST
              Value: localhost
            - Name: SQL_PORT
              Value: 5432
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ApplicationECRRepositoryName}:${ApplicationDockerImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/tinydevcrm"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: docker
          MemoryReservation: 395
          MountPoints:
            - ContainerPath: /home/app/web/staticfiles
              SourceVolume: static_volume
          PortMappings:
            - ContainerPort: 8000
        - Name: collectstatic
          Command:
            - python3
            - manage.py
            - collectstatic
            - "--no-input"
          Cpu: 5
          Environment:
            - Name: DEBUG
              Value: '1'
            - Name: SECRET_KEY
              Value: change_me
            - Name: DJANGO_ALLOWED_HOSTS
              Value: '*'
            - Name: SQL_ENGINE
              Value: django.db.backends.sqlite3
            - Name: SQL_DATABASE
              Value: db.sqlite3
            - Name: SQL_USER
              Value: user
            - Name: SQL_PASSWORD
              Value: password
            - Name: SQL_HOST
              Value: localhost
            - Name: SQL_PORT
              Value: 5432
          Essential: false
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tinydevcrm-ecr/app:${ApplicationDockerImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/${AWS::StackName}/ecs/tinydevcrm"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: docker
          MemoryReservation: 5
          MountPoints:
            - ContainerPath: /home/app/web/staticfiles
              SourceVolume: static_volume
      Family: tinydevcrm-app
      NetworkMode: awsvpc
      Volumes:
        - Name: static_volume
          Host:
            SourcePath: /data/home/app/web/staticfiles

  ApplicationServiceTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Description: A dummy target group is used to set up the application load balncer to just drop network traffic initially, before any real service target groups have been added.
    Properties:
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      VpcId: !ImportValue
        Ref: VPCReference

  EC2AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Description: This resource launches the actual EC2 instances that will register themselves as members of the EC2 cluster, and run the Docker containers. Creation policy specifies timeout after 5 minutes.
    Properties:
      DesiredCapacity: !Ref EC2DesiredCapacity
      LaunchConfigurationName: !Ref EC2LaunchConfiguration
      MaxSize: !Ref EC2MaximumCapacity
      MinSize: !Ref EC2MinimumCapacity
      VPCZoneIdentifier:
        - "Fn::ImportValue": !Ref PublicSubnetAReference
        - "Fn::ImportValue": !Ref PublicSubnetBReference
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"

  EC2AutoscalingRole:
    Type: "AWS::IAM::Role"
    Description: Role to define EC2 autoscaling. NOTE that the EC2 autoscaling group may fail to stabilize if this role is mis-defined.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  EC2HostSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Description: Security group for the EC2 hosts that will run the containers.
    Properties:
      GroupDescription: Access to EC2 hosts that run containers
      VpcId: !ImportValue
        Ref: VPCReference

  EC2HostsRole:
    Type: "AWS::IAM::Role"
    Description: "Role for EC2 hosts as passed by resource 'EC2InstanceProfile'. This allows the ECS agent on the EC2 hosts to communicate with the ECS control plane, and download container images from AWS ECR to run with the host."
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - Ref: EC2HostsRole

  EC2LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Description: Launch configuration for EC2 instances acting as ECS hosts.
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_volume_staticfiles:
              command: mkdir -p /data/home/app/web/staticfiles
            02_volume_staticfiles_permissions:
              command: chown -R 1000:1000 /data/home/app/web/staticfiles
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref EC2HostAMI
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
        - Ref: EC2HostSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSClusterName} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchConfiguration --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}

  EC2SecurityGroupIngressFromPublicALB:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Ingress rule to EC2 hosts from the public-facing application load balancer. IpProtocol of -1 allows all protocols / network traffic. SourceSecurityGroupId references the security group for the foreign resource.
      GroupId: !Ref EC2HostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  EC2SecurityGroupIngressFromSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      CidrIp: !Ref SSHLocation
      Description: Ingress rule to EC2 hosts to explicitly allow SSH from a specific SSH location.
      FromPort: "22"
      GroupId: !Ref EC2HostSecurityGroup
      IpProtocol: tcp
      ToPort: "22"

  EC2SecurityGroupIngressFromSelf:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Ingress rule to EC2 hosts from other EC2 hosts within the same security group.
      GroupId: !Ref EC2HostSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref EC2HostSecurityGroup

  ECSAgentRole:
    Type: "AWS::IAM::Role"
    Description: "IAM role to authorize ECS to manage resources on your account on your behalf. Policy 'ecs-service' allows ECS to attach network interfaces to EC2 instances to get 'awsvpc' working properly, and updates load balancers to send traffic to containers properly."
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"

  PublicLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Description: Load balancer placed onto public subnets, so that network traffic from Internet can reach load balancer directly via the Internet gateway.
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Scheme: internet-facing
      SecurityGroups:
        - Ref: PublicLoadBalancerSecurityGroup
      Subnets:
        - "Fn::ImportValue": !Ref PublicSubnetAReference
        - "Fn::ImportValue": !Ref PublicSubnetBReference

  PublicLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationServiceTargetGroup
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  PublicLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for the public-facing load balancer. Allows access from anywhere on the Internet.
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: -1
      VpcId: !ImportValue
        Ref: VPCReference
